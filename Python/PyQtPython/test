from PyQt5 import QtWidgets, QtGui, QtCore
from PyQt5.QtSerialPort import QSerialPort, QSerialPortInfo
from PyQt5.QtCore import QIODevice
from PyQt5.QtWidgets import QMainWindow
from visual import Ui_ArduinoProject
import sys


def show_comfort_image():
    dialog = QtWidgets.QDialog()
    dialog.setWindowTitle("Комфортный диапазон температуры и относительной влажности")
    layout = QtWidgets.QVBoxLayout()

    label = QtWidgets.QLabel()
    pixmap = QtGui.QPixmap("img/table.jpg")
    scaled_pixmap = pixmap.scaled(834, 818, QtCore.Qt.KeepAspectRatio, QtCore.Qt.SmoothTransformation)
    label.setPixmap(scaled_pixmap)
    label.setScaledContents(True)
    layout.addWidget(label)

    dialog.setLayout(layout)
    dialog.setFixedSize(834, 818)
    dialog.exec_()


def change_theme(selected_theme):
    if selected_theme == "Default":
        app.setStyle("Fusion")
    elif selected_theme == "Тёмная":
        app.setStyle("Fusion")
        app.setStyleSheet("QWidget { background-color: #2b2b2b; color: white; }")
    elif selected_theme == "Светлая":
        app.setStyle("Fusion")
        app.setStyleSheet("QWidget { background-color: white; color: black; }")


def show_instructions():
    msg_box = QtWidgets.QMessageBox()
    msg_box.setWindowIcon(QtGui.QIcon('icon.png'))
    msg_box.setWindowTitle("Инструкция")
    msg_box.setText("Инструкция по эксплуатации")
    msg_box.setStyleSheet("QLabel{font-size: 18px;}")
    msg_box.setInformativeText("""
    1. Подключите метеостанцию

    2. Выберите появившийся порт в поле подключения
    3. Нажмите Подключить""")
    msg_box.exec_()


def show_personalization_dialog():
    dialog = QtWidgets.QDialog()
    dialog.setWindowTitle("Персонализация")

    layout = QtWidgets.QVBoxLayout()

    label = QtWidgets.QLabel("Выберите тему:")
    layout.addWidget(label)

    theme_combo = QtWidgets.QComboBox()
    theme_combo.addItems(["Default", "Тёмная", "Светлая"])
    layout.addWidget(theme_combo)

    apply_button = QtWidgets.QPushButton("Применить")
    layout.addWidget(apply_button)

    apply_button.clicked.connect(lambda: change_theme(theme_combo.currentText()))

    dialog.setLayout(layout)
    dialog.exec_()


class MyProgram(QMainWindow, Ui_ArduinoProject):
    def __init__(self):
        super().__init__()

        self.setupUi(self)
        self.setWindowTitle("Arduino Project")

        self.serial = QSerialPort()
        self.serial.setBaudRate(115200)
        self.populate_ports()
        self.setup_connections()

    def populate_ports(self):
        p_list = []
        ports = QSerialPortInfo().availablePorts()
        for port in ports:
            p_list.append(port.portName())
        self.portlist.addItems(p_list)

    def setup_connections(self):
        self.conB.clicked.connect(self.open_port)
        self.disconnectB.clicked.connect(self.close_port)
        self.comfort.clicked.connect(self.show_comfort_table)
        self.led.stateChanged.connect(self.led_control)
        self.instructions.clicked.connect(show_instructions)
        self.comfort.clicked.connect(show_comfort_image)
        self.personalization.clicked.connect(show_personalization_dialog)
        self.serial.readyRead.connect(self.read_serial_port)

    def open_port(self):
        self.serial.setPortName(self.portlist.currentText())
        self.serial.open(QIODevice.ReadWrite)

    def close_port(self):
        self.serial.close()

    def serial_send(self, data):
        txs = ','.join(map(str, data)) + ';'
        self.serial.write(txs.encode())

    def led_control(self, led_state):
        if led_state == 2:
            led_state = 1
        self.serial_send([0, led_state])

    def read_serial_port(self):
        rx = self.serial.readLine()
        rxs = str(rx, 'utf-8').strip()
        data = rxs.split(',')
        if data[0] == '1':
            self.tempBar.setValue(int(float(data[1])))
            self.tempL.setText(data[1])
            self.pressureBar.setValue(int(float(data[3])))
            self.prsL.setText(data[3])
            self.humidityBar.setValue(int(float(data[2])))
            self.hmdtL.setText(data[2])
        if data[0] == '2':
            self.stats.setText("Датчик не подключен")
        if data[0] == '3':
            self.stats.setText("Отсутствует SD карта")

    def show_comfort_table(self):
        pass


if __name__ == '__main__':
    app = QtWidgets.QApplication(sys.argv)
    ex = MyProgram()
    ex.show()
    sys.exit(app.exec())
